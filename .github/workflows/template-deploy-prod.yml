name: Deploy to Production (Reusable Template)

on:
  workflow_call:
    inputs:
      artifact_name:
        description: 'Name of the build artifact'
        required: true
        type: string
      version:
        description: 'Application version'
        required: true
        type: string
      project_number:
        description: 'PCM Project Number'
        required: false
        type: string
        default: 'RITM1185178'
    secrets:
      azure_client_id:
        required: true
      azure_tenant_id:
        required: true
      azure_subscription_id:
        required: true
      azure_resource_group:
        required: true
      azure_webapp_name:
        required: true
      azure_storage_name:
        required: true

jobs:
  validate:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    steps:
      - name: Validate Project Number
        run: |
          PROJECT_NUMBER="${{ inputs.project_number }}"
          if [[ ! "$PROJECT_NUMBER" =~ ^RITM ]]; then
            echo "❌ Error: Project number must start with 'RITM' (got: $PROJECT_NUMBER)"
            exit 1
          fi
          echo "✅ Project number validated: $PROJECT_NUMBER"

      - name: Validation Summary
        run: |
          echo "Pre-deployment checks passed"
          echo "Version: ${{ inputs.version }}"
          echo "Project: ${{ inputs.project_number }}"

  deploy:
    name: Deploy to Production
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required for artifact download
    environment:
      name: production
      url: https://mcpcopilot.azurewebsites.net
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ./publish

      - name: Login to Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure_client_id }}
          tenant-id: ${{ secrets.azure_tenant_id }}
          subscription-id: ${{ secrets.azure_subscription_id }}

      - name: Create/Update Storage Account (Production)
        run: |
          RG="${{ secrets.azure_resource_group }}"
          LOCATION="eastus"
          STORAGE_NAME="${{ secrets.azure_storage_name }}"
          PROJECT_NUMBER="${{ inputs.project_number }}"
          TIMESTAMP=$(date +%s)
          
          echo "Creating resource group..."
          az group create --name $RG --location $LOCATION
          
          echo "Creating storage account with full production tags (50 tags)..."
          RUN_NUMBER="${{ github.run_number }}"
          COMMIT_SHA="${{ github.sha }}"
          
          az storage account create \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --location $LOCATION \
            --sku Standard_LRS \
            --kind StorageV2 \
            --tags \
              pcm-application_name_sysid=placeholder \
              pcm-built_by="${{ github.actor }}@users.noreply.github.com" \
              pcm-business_service_sysid=SAVNS \
              pcm-project_number="$PROJECT_NUMBER" \
              pcm-sensitive_data_cjis=yes \
              pcm-sensitive_data_ferpa=no \
              pcm-sensitive_data_fti=no \
              pcm-sensitive_data_pci=no \
              pcm-sensitive_data_phi=no \
              pcm-sensitive_data_pii=yes \
              pcm-tag_1="SAVNS HB2582" \
              pcm-tag_2=placeholder \
              pcm-tag_3=placeholder \
              deployed-by="${{ github.actor }}" \
              deployment-timestamp="$TIMESTAMP" \
              github-run-id="${{ github.run_id }}" \
              github-run-number="$RUN_NUMBER" \
              commit-sha="${COMMIT_SHA:0:8}" \
              branch="${{ github.ref_name }}" \
              workflow="${{ github.workflow }}" \
              environment="production" \
              cost-center="CC-$RANDOM" \
              department="Engineering" \
              team="Platform" \
              owner="${{ github.repository_owner }}" \
              repository="${{ github.repository }}" \
              managed-by="github-actions" \
              automation="enabled" \
              backup-policy="daily" \
              retention-days="90" \
              compliance="required" \
              security-zone="internal" \
              data-classification="confidential" \
              service-tier="standard" \
              monitoring="enabled" \
              logging="enabled" \
              auto-tag-1="value-$RANDOM" \
              auto-tag-2="value-$RANDOM" \
              auto-tag-3="value-$RANDOM" \
              auto-tag-4="value-$RANDOM" \
              auto-tag-5="value-$RANDOM" \
              custom-id-1="$(uuidgen | cut -d'-' -f1)" \
              custom-id-2="$(uuidgen | cut -d'-' -f1)" \
              custom-id-3="$(uuidgen | cut -d'-' -f1)" \
              region="$LOCATION" \
              disaster-recovery="enabled" \
              high-availability="enabled" \
              performance-tier="standard" \
              network-access="private" \
              firewall-enabled="yes"

      - name: Verify Storage Account
        run: |
          echo "Verifying production storage account deployment..."
          STORAGE_NAME="${{ secrets.azure_storage_name }}"
          RG="${{ secrets.azure_resource_group }}"
          
          # Check if storage account exists and is available
          echo "Checking storage account status..."
          az storage account show \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query '{name:name, location:location, sku:sku.name, status:statusOfPrimary, provisioningState:provisioningState, httpsOnly:enableHttpsTrafficOnly}' \
            -o table
          
          # Verify all 50 production tags
          echo "\nVerifying production tags (50 tags)..."
          TAG_COUNT=$(az storage account show \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query 'length(tags)' \
            -o tsv)
          
          echo "Tag count: $TAG_COUNT"
          
          az storage account show \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query 'tags' \
            -o json
          
          # Verify critical security settings
          echo "\nVerifying security settings..."
          az storage account show \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query '{httpsOnly:enableHttpsTrafficOnly, minTlsVersion:minimumTlsVersion, allowBlobPublicAccess:allowBlobPublicAccess}' \
            -o json
          
          echo "\n✅ Storage account verification completed"

      - name: Run Production Smoke Tests
        run: |
          echo "Running production storage smoke tests..."
          STORAGE_NAME="${{ secrets.azure_storage_name }}"
          RG="${{ secrets.azure_resource_group }}"
          
          # Get connection string
          CONN_STRING=$(az storage account show-connection-string \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query connectionString \
            -o tsv)
          
          # Test blob service availability
          echo "Testing blob service endpoint..."
          az storage container list \
            --connection-string "$CONN_STRING" \
            --query '[].name' \
            -o table || echo "No containers yet (expected for new storage)"
          
          # Verify service endpoints are responding
          echo "Testing storage account endpoints..."
          az storage account show \
            --name $STORAGE_NAME \
            --resource-group $RG \
            --query 'primaryEndpoints' \
            -o json
          
          echo "\n✅ Production smoke tests completed"

      - name: Create Deployment Tag
        run: |
          echo "Would create git tag: v${{ inputs.version }}"
          # git tag v${{ inputs.version }}
          # git push origin v${{ inputs.version }}

      - name: Deployment Summary
        run: |
          echo "✅ Production deployment completed successfully"
          echo "Version: ${{ inputs.version }}"
          echo "Environment: production"
          echo "Project: ${{ inputs.project_number }}"
          echo "Storage Account: ${{ secrets.azure_storage_name }}"
          echo "Resource Group: ${{ secrets.azure_resource_group }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"

  notify:
    name: Post-Deployment Notifications
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Production deployment successful - v${{ inputs.version }}"
          echo "Sending Teams notification..."
          # curl -H 'Content-Type: application/json' -d '{
          #   "@type": "MessageCard",
          #   "@context": "https://schema.org/extensions",
          #   "summary": "Production Deployment Successful",
          #   "themeColor": "00FF00",
          #   "title": "✅ Production Deployment Successful",
          #   "sections": [{
          #     "activityTitle": "MCP-LLM-Learning",
          #     "activitySubtitle": "Deployed by ${{ github.actor }}",
          #     "facts": [
          #       {"name": "Version:", "value": "${{ inputs.version }}"},
          #       {"name": "Environment:", "value": "Production"},
          #       {"name": "Project:", "value": "${{ inputs.project_number }}"},
          #       {"name": "Storage Account:", "value": "${{ secrets.azure_storage_name }}"},
          #       {"name": "Commit:", "value": "${{ github.sha }}"},
          #       {"name": "Run ID:", "value": "${{ github.run_id }}"}
          #     ]
          #   }],
          #   "potentialAction": [{
          #     "@type": "OpenUri",
          #     "name": "View Run",
          #     "targets": [{"os": "default", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
          #   }]
          # }' ${{ secrets.TEAMS_WEBHOOK }}

      - name: Send Failure Notification
        if: needs.deploy.result != 'success'
        run: |
          echo "❌ Production deployment failed"
          echo "Sending Teams failure alert..."
          # curl -H 'Content-Type: application/json' -d '{
          #   "@type": "MessageCard",
          #   "@context": "https://schema.org/extensions",
          #   "summary": "Production Deployment Failed",
          #   "themeColor": "FF0000",
          #   "title": "❌ Production Deployment Failed",
          #   "sections": [{
          #     "activityTitle": "MCP-LLM-Learning",
          #     "activitySubtitle": "Attempted by ${{ github.actor }}",
          #     "facts": [
          #       {"name": "Version:", "value": "${{ inputs.version }}"},
          #       {"name": "Environment:", "value": "Production"},
          #       {"name": "Project:", "value": "${{ inputs.project_number }}"},
          #       {"name": "Status:", "value": "${{ needs.deploy.result }}"},
          #       {"name": "Commit:", "value": "${{ github.sha }}"},
          #       {"name": "Run ID:", "value": "${{ github.run_id }}"}
          #     ],
          #     "text": "⚠️ Immediate attention required! Production deployment has failed."
          #   }],
          #   "potentialAction": [{
          #     "@type": "OpenUri",
          #     "name": "View Failed Run",
          #     "targets": [{"os": "default", "uri": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
          #   }]
          # }' ${{ secrets.TEAMS_WEBHOOK }}
